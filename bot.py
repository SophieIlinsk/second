from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup
from gpt import *
from functions import *
from SQL3 import *
from googletrans import Translator
from transformers import AutoTokenizer

bot = TeleBot(TOKEN)
MAX_LETTERS = MAX_TOKENS


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt",
    filemode="w",
)


 # –ø—Ä–∏–≤–µ—Ç–ª–∏–≤–æ—Å—Ç—å
bot.message_handler(content_types=['text'])
def ansvers (message):
    if "–ø—Ä–∏–≤" in message.text.lower():
        bot.reply_to(message,  text=f"–ø—Ä–∏–≤–µ—Ç–∏–∫–∏!")
    elif "–ø–æ–∫–∞" in message.text.lower():
        bot.reply_to(message,  text=f"–ø–æ–∫–∞-–ø–æ–∫–∞")
    elif "–∫—Ç–æ" and "—Ç—ã" in message.text.lower():
        bot.reply_to(message,  text=f"—Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ /menu –∏ —É–∑–Ω–∞—Ç—å –∫—Ç–æ —è!")
    elif "–∫–∞–∫" and "–¥–µ–ª–∞" in message.text.lower():
        bot.reply_to(message, text=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª_–∞! –î–µ–ª–∞ –æ—Ç–ª–∏—á–Ω–æ!")


def create_keyboard(buttons_list): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard

@bot.message_handler(commands=['start']) #–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def handler_start(message):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    start = say_hello(message)
    try:
        db_user = Database()
        if not db_user.check_user_exists(message.chat.id, message.chat.first_name):
            db_user.add_user(message.chat.id, message.chat.first_name)
            bot.send_message(message.chat.id, start, parse_mode='html',
                             reply_markup=create_keyboard(["–í—ã–±–æ—Ä —Å —á–µ–º –ø–æ–º–æ—á—åüìã", '–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—èüîã', 'üë§–ü—Ä–æ—Ñ–∏–ª—å']))
        else:
            bot.send_message(message.chat.id, start, parse_mode='html',
                             reply_markup=create_keyboard(["–í—ã–±–æ—Ä —Å —á–µ–º –ø–æ–º–æ—á—åüìã", '–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—èüîã', 'üë§–ü—Ä–æ—Ñ–∏–ª—å']))
            db_user.close()
    except Exception as e:
        bot.send_message(message.chat.id, error_4)
        logging.error(str(e))


@bot.message_handler(commands=['help'])
def support(message):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ help —Å–æ–æ–±—â–µ–Ω–∏—è")
    bot.send_message(message.from_user.id,
                     text=say_hello,
                     reply_markup=create_keyboard(["/solve_task"]))


@bot.message_handler(func=lambda message: message.text == "–í—ã–±–æ—Ä —Å —á–µ–º –ø–æ–º–æ—á—åüìã")
def subject_selection(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—ã–±–æ—Ä, —Å —á–µ–º –ø–æ–º–æ—á—å, –º–µ–∂–¥—É: –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π',
                     parse_mode='html', reply_markup=create_keyboard(["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è"]))
    bot.register_next_step_handler(message, subject_selection2)

def subject_selection2(message):
    conn = sqlite3.connect('bot_users.db')
    user_id = message.from_user.id
    new_subject = message.text
    update_subject(conn, user_id, new_subject)
    conn.close()
    bot.reply_to(message, text=f" —Ç–∞–∫ –∏ –∑–∞–ø–∏—à—É, —Ç—ã –≤—ã–±—Ä–∞–ª ¬´{message.text}¬ª")
    bot.send_message(message.chat.id, "—á—Ç–æ –¥–∞–ª–µ–µ?", parse_mode='html',
                     reply_markup=create_keyboard(["–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—èüîã", '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å gpt‚ùì', 'üë§–ü—Ä–æ—Ñ–∏–ª—å']))



@bot.message_handler(func=lambda message: message.text == "–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—èüîã")
def level_selection(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω–µ–π: –ë–∞–∑–æ–≤—ã–π, –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π',
                     parse_mode='html', reply_markup=create_keyboard(["–ë–∞–∑–æ–≤—ã–π", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π"]))
    bot.register_next_step_handler(message, level_selection2)

def level_selection2(message):
    conn = sqlite3.connect('bot_users.db')
    user_id = message.from_user.id
    new_subject = message.text
    update_subject(conn, user_id, new_subject)
    conn.close()
    bot.reply_to(message, text=f" —Ç–∞–∫ –∏ –∑–∞–ø–∏—à—É, —Ç—ã –≤—ã–±—Ä–∞–ª ¬´{message.text}¬ª")
    bot.send_message(message.chat.id, "—á—Ç–æ –¥–∞–ª–µ–µ?", parse_mode='html',
                     reply_markup=create_keyboard(["–í—ã–±–æ—Ä —Å —á–µ–º –ø–æ–º–æ—á—åüìã", '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å gpt‚ùì', 'üë§–ü—Ä–æ—Ñ–∏–ª—å']))


@bot.message_handler(func=lambda message: message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì')
def promt_message(message):
    try:
        promt = message.text
        bot.send_message(message.chat.id, '<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:</b>',
                           parse_mode='html', reply_markup=create_keyboard(["–ù–∞–∂–º–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚úèÔ∏è"]))

        def promt_user(message):
            tokenizer = AutoTokenizer.from_pretrained("mistralai/Mistral-7B-Instruct-v0.2")
            if len(tokenizer.encode(message.text)) > MAX_TOKENS:
                bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å.")
                logging.info(f"TELEGRAM BOT: Input: {message.text}\nOutput: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
                return
            message1 = bot.send_message(message.chat.id, '<b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...‚è≥</b>', parse_mode='html')
            user_id = message.chat.id
            system_content = promt_db(promt, user_id)
            translator = Translator()
            result1 = translator.translate(f'{promt}', src='ru', dest='en')
            g = Question_gpt2()
            n1 = g.promt(result1, system_content)
            result = translator.translate(f'{n1}', src='en', dest='ru')
            add = promt_add(n1, user_id, result)
            bot.edit_message_text(chat_id=message.chat.id, message_id=message1.message_id, text=
            add, parse_mode='html')
            bot.send_message(message.chat.id,'–ù–∞–∂–º–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚úèÔ∏è\n'
                                                '–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –µ—â–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.',
                             reply_markup=create_keyboard(["–ù–∞–∂–º–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚úèÔ∏è"]))
            Quantity(user_id)
        bot.register_next_step_handler(message, promt_user)
    except Exception as e:
        bot.send_message(message.chat.id, error_4)
        logging.error(str(e))


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚úèÔ∏è')
def promt_continue(message):
    try:
        user_id = message.from_user.id
        promt1 = Continue(user_id)
        if not promt1:
            bot.send_message(message.chat.id, error_2, parse_mode='html')
            return
        if len(promt1) >= 1000:
            bot.send_message(message.chat.id, error_1, parse_mode='html')
            return

        message2 = bot.send_message(message.chat.id, '<b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...‚è≥</b>', parse_mode='html')
        user_id = message.chat.id
        system_content = contine_db(user_id)
        n = Continue_text_gpt()
        n1 = n.gpt(promt1,system_content)
        translator = Translator()
        result = translator.translate(f'{n1}', src='en', dest='ru')
        r = promt1 + n1
        user_id = message.chat.id
        add_contine_promt(r, user_id)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message2.message_id, text=f'{result.text}')

    except Exception as e:
        bot.send_message(message.chat.id, error_4)
        logging.error(str(e))




@bot.message_handler(func=lambda message: message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
def house(message):
    user_id = message.chat.id
    info1 = info_db(user_id, message.chat.first_name)
    bot.send_message(message.chat.id, info1, parse_mode='html')



@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)

bot.polling()
